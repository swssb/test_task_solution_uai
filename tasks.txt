
Тестовое задание


Создайте строку из нечетных чисел от 1 до 100 следующего вида: 13579111315…
Какой будет результат выполнения следующего кода? Почему?
b = 10
def f(a):
    print(a)
    print(b)
    b = 15

f(3)

Что получится в результате двух вычислений? Почему?
t = (1, 2, [50, 60])
t[2] += [10, 20]
Напишите функцию, которая принимает строку и возвращает ее перевернутую версию. Напишите функцию, которая проверяет, является ли строка палиндромом.
Создайте текстовый файл с несколькими строками текста. Напишите функцию, которая читает файл и выводит количество слов в каждой строке.
Напишите генератор, используя регулярное выражение, для поиска всех email-адресов в текстовом файле Напишите программу, которая использует, написанный генератор для копирования в другой файл.
Наполните текстовый файл рандомными значениями (побольше), можете использовать сторонние библиотеки (faker). Напишите декоратор timeit который принимает значение N для измерения времени работы функции и примените к прошлому заданию. Если время превышает заданное N выводить дополнительное уведомление.
Напишите программу, которая создает два потока и выводит сообщения из них параллельно.
Напишите реализацию задачи “Банковская система”. Описание задачи ниже.
Напишите программу, которая делает запрос к открытому API (например, GitHub API) и выводит информацию о пользователе. Создайте простой веб-сервер (Flask, FastAPI). Напишите эндпойнт, который добавляет результат в гугл-таблицу и эндпойнт, который возвращает данные из гугл таблицы в виде JSON-объекта.
Создайте базу данных SQLite с таблицей "Сотрудники" (поля: id, имя, зарплата). Напишите клиент для работы с БД, реализовав CRUD операции.
Организовать Django-приложение, которое будет выводить некую статистику, собранную по API. Описание задачи ниже.







Банковская система
Задача: Банковская система
Разработайте систему для управления банковскими счетами. Система должна поддерживать следующие возможности:
Создание клиентов и счетов:
Клиент может создать учетную запись в банке.
У клиента может быть несколько счетов (например, текущий счет, сберегательный счет).
Операции по счету:
Клиент может внести деньги на счет.
Клиент может снять деньги со счета.
Клиент может запросить баланс своего счета.
Транзакции:
Вести учет транзакций (операций по счету) с деталями (сумма, дата, тип операции).
Интересы по сберегательному счету:
Реализовать функциональность начисления процентов по сберегательному счету.
Кредитные счета:
Поддержка кредитных счетов с установленным лимитом и ставкой.
История транзакций:
Клиент может просмотреть историю транзакций по своему счету.
Защита данных:
Обеспечить безопасность данных клиентов, используя принципы инкапсуляции.
Обработка ошибок:
Реализовать обработку ошибок для случаев, например, попытки снятия суммы больше, чем есть на счету.
Эта задача требует создания классов для клиентов, счетов и транзакций, а также использование принципов наследования, инкапсуляции и полиморфизма.

Django-приложение
Организовать Django-приложение, которое будет выводить некую статистику, собранную по API.
Обязательные условия
В качестве БД использовать PostgreSQL
Написать периодическую задачу, которая будет собирать 1 раз в час данные по API (пример).
Добавить endpoint по которому выводятся данные для авторизованных пользователей результат работы периодической задачи. Страница должна содержать какой нибудь фильтр.
Использовать Python 3.7+.
Обязательные условия
Запуск сервисов в docker-контейнерах.
Периодическая задача должна отрабатываться автоматически.
Сопроводить файлом requirements.txt

